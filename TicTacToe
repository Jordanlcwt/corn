from copy import deepcopy
import math

X = "X"
O = "O"
EMPTY = None


def initial_state():
    """
    Returns starting state of the board.
    """
    return [[EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY]]


def player(board):
    Xcount = 0
    Ocount = 0
    for i in board:
        for j in i:
            if j == X:
                Xcount += 1
            elif j == O:
                Ocount += 1
    if Xcount > Ocount:
        return O
    return X


def actions(board):
    Hcount = 0
    Vcount = 0 #top left has coordinates (0,0) == (Vcount,Hcount)
    answer = []
    for i in board:
        Hcount = 0
        for j in i:
            if j == EMPTY:
               answer.append((Vcount, Hcount))
            Hcount += 1
        Vcount += 1
    return answer
            

def result(board, action):
    x = actions(board)
    Y = player(board)
    if action not in x:
        raise Exception("Illegal move")
    deepcopy(board)
    newboard = deepcopy(board)
    newboard[action[0]][action[1]] = Y
    return newboard


def winner(board):
    for i in board:
        if i[0] == i[1] == i[2] and i[0] != EMPTY:
            return i[0]
    for i in range (0,3):
        count = []
        for j in range(0,3):
            count.append(board[j][i])
        if count[0] == count[1] == count[2] and count[0] != EMPTY:
            return count[0]
    if board[0][0] == board[1][1] == board[2][2] and board [0][0] != EMPTY:
        return board [0][0]
    if board[0][2] == board[1][1] == board[2][0] and board [2][0] != EMPTY:
        return board[0][2]
    return None


def terminal(board):
    if winner(board) != None:
        return True
    emptycheck = 0
    for i in range(0,3):
        for j in range(0,3):
            if board[i][j] == EMPTY:
                emptycheck+=1
    if emptycheck > 0:
        return False
    return True


def utility(board):
    if terminal(board):
        if winner(board) == X:
            return 1
        if winner(board) == O:
            return -1
        return 0
    return


def minimax(board):
    def maxi(board):
        if terminal(board):
            return utility(board)
        v = float("-inf")
        for action in actions(board):
            v = max(v, mini(result(board, action)))
        
        return v

    def mini(board):
        if terminal(board):
            return utility(board)
        v = float("inf")
        for action in actions(board):
            v = min(v, maxi(result(board, action)))

        return v

    if board == [[EMPTY]*3]*3:
        return (0,0)

    if player(board) == X:
        v = float("-inf")
        action0 = None
        for action in actions(board):
            minValueResult = mini(result(board, action))
            if minValueResult > v:
                v = minValueResult
                action0 = action
                
    elif player(board) == O:
        v = float("inf")
        action0 = None
        for action in actions(board):
            maxValueResult = maxi(result(board, action))
            if maxValueResult < v:
                v = maxValueResult
                action0 = action

    return action0
